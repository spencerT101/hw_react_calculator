[{"/Users/spencertaber/codeclan_work/week_07/day_02/5_react_testing_lab/react_calculator/src/index.js":"1","/Users/spencertaber/codeclan_work/week_07/day_02/5_react_testing_lab/react_calculator/src/reportWebVitals.js":"2","/Users/spencertaber/codeclan_work/week_07/day_02/5_react_testing_lab/react_calculator/src/App.js":"3","/Users/spencertaber/codeclan_work/week_07/day_02/5_react_testing_lab/react_calculator/src/components/Calculator.js":"4"},{"size":500,"mtime":1620746639834,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1620746639833,"results":"7","hashOfConfig":"6"},{"size":2747,"mtime":1620771593949,"results":"8","hashOfConfig":"6"},{"size":2177,"mtime":1620771128604,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"cj784f",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/spencertaber/codeclan_work/week_07/day_02/5_react_testing_lab/react_calculator/src/index.js",[],["20","21"],"/Users/spencertaber/codeclan_work/week_07/day_02/5_react_testing_lab/react_calculator/src/reportWebVitals.js",[],"/Users/spencertaber/codeclan_work/week_07/day_02/5_react_testing_lab/react_calculator/src/App.js",["22","23"],"import React, {useEffect, useState} from 'react';\nimport Calculator from './components/Calculator';\nimport './App.css';\n\nfunction App() {\n\n  const [previousTotal, setPreviousTotal] = useState(0); \n  const [runningTotal , setRunningTotal] = useState(0); \n  const [previousOperator, setPreviousOperator] = useState(null); \n  const [newTotal, setNewTotal] = useState(true); \n\n  const numberClick =  (number) => {\n    if ( runningTotal === 0 || newTotal){\n      setRunningTotal(\"\");\n      setNewTotal(false);\n    }\n\n    setRunningTotal(parseFloat(\"\" + runningTotal + number));\n  }\n\n  const clearClick = () => {\n    if (runningTotal === 0) {\n      setPreviousOperator(null);\n      setPreviousTotal(null);\n    }\n    setRunningTotal(0);\n  }\n\n  const operatorClick = (operator) => {\n    // if there was a previous operator recorded as having been clicked, perform\n      // the operation for the previous operator\n      if (previousTotal && previousOperator) {\n        switch (previousOperator) {\n          case \"+\":\n            add(runningTotal);\n            break;\n          case \"-\":\n            subtract(runningTotal);\n            break;\n          case \"*\":\n            multiply(runningTotal);\n            break;\n          case \"/\":\n            divide(runningTotal);\n            break;\n        }\n      }\n\n      // if the 'equals' button was clicked, clear the previous operator, otherwise\n      // record what the previous operator was\n      if (operator === \"=\") {\n        setPreviousOperator(null);\n      } else {\n        setPreviousOperator(operator);\n        setRunningTotal(\"\");\n\n      }\n      // replace the previous total with the current running total and flag that a\n      // new total has been calculated\n\n      setPreviousTotal(runningTotal);\n      setNewTotal(true);\n  }\n\n  const add = (number) => {\n    setRunningTotal(parseFloat(previousTotal) + parseFloat(number));\n  }\n\n  const subtract = (number) => {\n    setRunningTotal(parseFloat(previousTotal) - parseFloat(number));\n  }\n\n  const multiply = (number) => {\n    setRunningTotal(parseFloat(previousTotal) * parseFloat(number));\n  }\n\n  const divide = (number) => {\n    setRunningTotal(parseFloat(previousTotal) / parseFloat(number));\n  }\n\n  // added a const variable called decimal and setting a function to recognise the '.' operator.\n  // const decimal = (number) =>{\n  //   setRunningTotal(parseFloat(runningTotal) . parseFloat(number))\n  // }\n\n\n  return (\n    <div className=\"container\">\n    <div className=\"calculator\">\n      <div data-testid=\"running-total\" className=\"display\">{ runningTotal }</div>\n      <Calculator \n      handleNumber={numberClick} \n      handleOperator={operatorClick} \n      handleClear={clearClick}\n      />\n    </div>\n  </div>\n  );\n}\n\nexport default App;\n","/Users/spencertaber/codeclan_work/week_07/day_02/5_react_testing_lab/react_calculator/src/components/Calculator.js",[],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":1,"column":16,"nodeType":"30","messageId":"31","endLine":1,"endColumn":25},{"ruleId":"32","severity":1,"message":"33","line":33,"column":9,"nodeType":"34","messageId":"35","endLine":46,"endColumn":10},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]